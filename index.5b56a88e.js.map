{"mappings":"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","sources":["src/js/API/fetch-film-api.js","src/js/refs.js","src/js/films-render.js","src/js/open-md-info-film.js","src/js/serch-movie.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'cf961b1b89f4c4a28558be2b04fdd59a';\n\nexport {\n  fetchPopularMovieAPI,\n  fetchMorePopularMovieAPI,\n  fetchGenresMovieAPI,\n  fetchMovieInfoAPI,\n  fetchMovieSearchAPI,\n};\n\n// fetch popular movies\nasync function fetchPopularMovieAPI(page) {\n\n  return await fetch(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not OK');\n      }\n      return response.json();\n    })\n    .then(data => {\n\n      return data.results;\n    })\n    .catch(error => {\n      console.error(\n        'There has been a problem with your fetch operation:',\n        error\n      );\n    });\n};\n\n// // fetch more popular movie\n// async function fetchMorePopularMovieAPI(page) {\n//   return await fetch(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`)\n//     .then(response => {\n//       if (!response.ok) {\n//         throw new Error('Network response was not OK');\n//       }\n//       return response.json();\n//     })\n//     .then(data => {\n//       window.scrollTo({\n//         top: 0,\n//         behavior: 'smooth',\n//       });\n\n//       return data.results;\n//     })\n//     .catch(error => {\n//       console.error(\n//         'There has been a problem with your fetch operation:',\n//         error\n//       );\n//     });\n// };\n\n// fetch id and names ganre for movies\nasync function fetchGenresMovieAPI() {\n  return await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not OK');\n      }\n      return response.json();\n    })\n    .then(data => {\n      return data.genres;\n    })\n    .catch(error => {\n      console.error(\n        'There has been a problem with your fetch operation:',\n        error\n      );\n    });\n};\n\n// fetch for all information for movie\nasync function fetchMovieInfoAPI(movie_id) {\n  return await fetch(`${BASE_URL}/movie/${movie_id}?api_key=${API_KEY}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not OK');\n      }\n      return response.json();\n    })\n    .then(data => {\n      return data;\n    })\n    .catch(error => {\n      console.error(\n        'There has been a problem with your fetch operation:',\n        error\n      );\n    });\n};\n\n// fetch search movie\nasync function fetchMovieSearchAPI(searchQuery) {\n  return await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=${1}&include_adult=folse`\n  )\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not OK');\n      }\n      return response.json();\n    })\n    .then(data => {\n      return data.results;\n    })\n    .catch(error => {\n      console.error('error:', error);\n    });\n};","export const refs = {\n  BASE_IMG_URL: 'https://image.tmdb.org/t/p/w500',\n  popularMovieList: document.querySelector('.home-film-list'),\n};","import { fetchPopularMovieAPI, fetchGenresMovieAPI } from './API/fetch-film-api';\nimport { refs } from './refs';\n\nconst numberPage = 1;\n\n// function for render film list markup \nexport function createMovieListMarkup(data, genres_names) {\n    if (data.length === 0) {\n        return;\n    }\n\n    return data\n        .map(({ id, title, poster_path, release_date, genre_ids }) => {\n            let release = release_date.slice(0, 4);\n            let genres = [];\n            for (let genre_id of genre_ids) {\n                let genre = genres_names.find(({ id }) => id === genre_id);\n                genres.push(genre.name);\n            };\n            if (genres.length >= 3) {\n                genres = [genres[0], genres[1], 'Other'];\n            };\n            let genres_str = genres.join(', ');\n            if (poster_path !== null) {\n                return `\n                <li class=\"film-list__item item\" data-id=\"${id}  data-target=\"card\">\n                    <img class=\"film-link__img\" src=\"${refs.BASE_IMG_URL}${poster_path}\" alt=\"${title}\" data-target=\"card\"\">\n                    <div class=\"wrapper\">\n                        <h3 class=\"film-link__title data-target=\"card\"\" >${title}</h3>\n                        <div class=\"film-link__grup\">\n                            <p class=\"film-genres\" data-target=\"card\">${genres_str}</p>\n                            <p class=\"film-year\" data-target=\"card\"><span class=\"film-line\">|</span>${release}</p>\n                        </div>\n                    </div>\n                </li>`;\n            }\n            return `\n                <li class=\"film-list__item item\" data-id=\"${id}  data-target=\"card\">\n                <img class=\"film-link__img\" src=\"\" alt=\"${title}\" data-target=\"card\"\">\n                    <div class=\"wrapper\">\n                        <h3 class=\"film-link__title data-target=\"card\"\" >${title}</h3>\n                        <div class=\"film-link__grup\">\n                            <p class=\"film-genres\" data-target=\"card\">${genres_str}</p>\n                            <p class=\"film-year\" data-target=\"card\"><span class=\"film-line\">|</span>${release}</p>\n                        </div>\n                    </div>\n                </li>`;}).join('');\n};\n\nfetchGenresMovieAPI().then(genres => {\n    fetchPopularMovieAPI(numberPage).then(data => {\n        let markup = createMovieListMarkup(data, genres);\n        refs.popularMovieList.insertAdjacentHTML('beforeend', markup);\n    });\n});","import { refs } from './refs';\nimport { fetchMovieInfoAPI } from './API/fetch-film-api';\n\nconst listOfMovies = document.querySelector('.home-film-list');\nconst bodyPage = document.querySelector('.wrapper-modal');\nconst backdrop = document.querySelector('.backdrop')\nconst closeBTN = document.querySelector('.close-btn');\n\n// function for render modal markup \nfunction createModalMarkup({ id, genres, original_title, overview, popularity, poster_path, title, vote_average, vote_count }) {\n    const voteNumeric = String(vote_average).slice(0, 3);\n    const popularityNumeric = popularity.toFixed(1);\n\n    const nameGenres = genres.map((item) => {\n       return item.name;\n    });\n\n    const modalMarkup = `\n        <div class=\"film-modal__poster\">\n            <img class='film-modal__img' width=\"375\" height=\"478\" src=\"${refs.BASE_IMG_URL}${poster_path}\"\n                alt=\"${title}\" />\n        </div>\n        \n        <div class=\"film-modal__details-info details-info\">\n            <!-- Title -->\n            <h2 class=\"details-info__title\">${title}</h2>\n        \n            <ul class=\"details-info__list-static list-static list\">\n        \n                <li class=\"list-static__item\">\n                    <p class=\"info-film-txt\">Vote / Votes</p>\n                    <p class=\"item-vote-rez\">\n                        <span class=\"tem-vote-rez--accent-mode\">${voteNumeric}</span>\n                        ${vote_count}\n                    </p>\n                </li>\n        \n                <li class=\"list-static__item\">\n                    <p class=\"info-film-txt\">Popularity</p>\n                    <p class='rez'>${popularityNumeric}</p>\n                </li>\n        \n                <li class=\"list-static__item\">\n                    <p class=\"info-film-txt\">Original Title</p>\n                    <p class=\"rez\">${original_title}</p>\n                </li>\n        \n                <li class=\"list-static__item\">\n                    <p class=\"info-film-txt\">Genre</p>\n                    <p class='rez'>${nameGenres} </p>\n                </li>\n            </ul>\n        \n            <div class=\"details-info__group\">\n                <p class=\"rez rez-title\">about</p>\n                <p class=\"rez rez-desc\">${overview}</p>\n            </div>\n        </div>`;\n\n    bodyPage.insertAdjacentHTML('afterBegin', modalMarkup);\n    backdrop.classList.remove('is-hidden');\n    closeBTN.addEventListener('click', closeMovieModalWindow);\n};\n\n// function open/close modal window\nexport default function openMovieModal(e) {\n    if (e.target.dataset.target !== 'card') {\n        return;\n    } else {\n\n        const movieId = e.target.closest('li').dataset.id;\n\n        document.removeEventListener('click', openMovieModal);\n    \n        fetchMovieInfoAPI(movieId)\n            .then(createModalMarkup);\n\n        backdrop.addEventListener('click', closeMovieModalWindowBackdrop);\n    };\n};   \n\n\nexport default function closeMovieModalWindow() {\n\n    bodyPage.innerHTML = '';\n    backdrop.classList.add('is-hidden');\n\n    document.addEventListener('click', openMovieModal);\n};\n\nfunction closeMovieModalWindowBackdrop(e) {\n    if (e.target.classList.contains('backdrop')) {\n        closeMovieModalWindow();\n    } \n};\n\nconst closeMovieModalWindowEscape = event => {\n    if (event.code === 'Escape') {\n        closeMovieModalWindow();\n    }\n};\n\nlistOfMovies.addEventListener('click', openMovieModal);\nwindow.addEventListener('keydown', closeMovieModalWindowEscape);","import { fetchGenresMovieAPI, fetchMovieSearchAPI } from './API/fetch-film-api';\nimport { createMovieListMarkup } from './films-render';\nimport { refs } from './refs';\n\nconst searchForm = document.querySelector('.form-search');\n\nasync function onInput(e) {\n    e.preventDefault();\n  \n    const value = e.target.elements.searchQuery.value.trim();\n\n    await fetchGenresMovieAPI().then(genres => {\n        fetchMovieSearchAPI(value).then(data => {\n            let markup = createMovieListMarkup(data, genres);\n            refs.popularMovieList.innerHTML = '';\n            refs.popularMovieList.insertAdjacentHTML('beforeend', markup);\n        });\n    });\n  }\n\nsearchForm.addEventListener('submit', onInput);"],"names":["async","$69f33d7e8356cda7$export$e97158cfbf093e92","page","fetch","then","response","ok","Error","json","data","results","catch","error","console","$69f33d7e8356cda7$export$db74aa163a185a52","genres","$69f33d7e8356cda7$export$6e8ceb3d3ef2d13d","movie_id","$69f33d7e8356cda7$export$2536cc886f4e7ae2","searchQuery","$ee27a4d7c64fc8c4$export$21666b427502ea6d","BASE_IMG_URL","popularMovieList","document","querySelector","$667dedb86a4f7555$export$a6333640704c25c2","genres_names","length","map","id","id1","title","poster_path","release_date","genre_ids","release","slice","genre_id","genre","find","push","name","genres_str","join","markup","insertAdjacentHTML","$2950d2a373a18c59$var$listOfMovies","$2950d2a373a18c59$var$bodyPage","$2950d2a373a18c59$var$backdrop","$2950d2a373a18c59$var$closeBTN","$2950d2a373a18c59$var$createModalMarkup","original_title","overview","popularity","vote_average","vote_count","voteNumeric","String","popularityNumeric","toFixed","nameGenres","item","modalMarkup","classList","remove","addEventListener","$2950d2a373a18c59$export$2e2bcd8739ae039","e","target","dataset","movieId","closest","removeEventListener","$2950d2a373a18c59$var$closeMovieModalWindowBackdrop","innerHTML","add","contains","window","event","code","preventDefault","value","elements","trim"],"version":3,"file":"index.5b56a88e.js.map"}